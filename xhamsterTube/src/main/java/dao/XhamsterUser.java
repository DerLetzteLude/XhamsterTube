package dao;

import java.util.List;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table XHAMSTER_USER.
 */
public class XhamsterUser {

    private Long id;
    private String userName;
    private String userUrl;
    private String thumbUrl;
    private String videosCount;
    private String picturesCount;
    private String description;
    private String age;
    private String gender;
    private String signedUp;
    private String lastActivity;
    private String profileViewed;
    private String Rank;
    private String comments;
    private String infoBlock;

    public String getInfoBlock() {
		return infoBlock;
	}

	public void setInfoBlock(String infoBlock) {
		this.infoBlock = infoBlock;
	}

	/** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient XhamsterUserDao myDao;

    private List<XhamsterVideo> xhamsterVideoList;
    private List<XhamsterPicture> xhamsterPictureList;
    private List<XhamsterGallery> xhamsterGalleryList;

    public XhamsterUser() {
    }

    public XhamsterUser(Long id) {
        this.id = id;
    }

    public XhamsterUser(Long id, String userName, String userUrl, String thumbUrl, String videosCount, String picturesCount, String description, String age, String gender, String signedUp, String lastActivity, String profileViewed, String Rank, String comments) {
        this.id = id;
        this.userName = userName;
        this.userUrl = userUrl;
        this.thumbUrl = thumbUrl;
        this.videosCount = videosCount;
        this.picturesCount = picturesCount;
        this.description = description;
        this.age = age;
        this.gender = gender;
        this.signedUp = signedUp;
        this.lastActivity = lastActivity;
        this.profileViewed = profileViewed;
        this.Rank = Rank;
        this.comments = comments;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getXhamsterUserDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getUserName() {
        return userName;
    }

    public void setUserName(String userName) {
        this.userName = userName;
    }

    public String getUserUrl() {
        return userUrl;
    }

    public void setUserUrl(String userUrl) {
        this.userUrl = userUrl;
    }

    public String getThumbUrl() {
        return thumbUrl;
    }

    public void setThumbUrl(String thumbUrl) {
        this.thumbUrl = thumbUrl;
    }

    public String getVideosCount() {
        return videosCount;
    }

    public void setVideosCount(String videosCount) {
        this.videosCount = videosCount;
    }

    public String getPicturesCount() {
        return picturesCount;
    }

    public void setPicturesCount(String picturesCount) {
        this.picturesCount = picturesCount;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public String getAge() {
        return age;
    }

    public void setAge(String age) {
        this.age = age;
    }

    public String getGender() {
        return gender;
    }

    public void setGender(String gender) {
        this.gender = gender;
    }

    public String getSignedUp() {
        return signedUp;
    }

    public void setSignedUp(String signedUp) {
        this.signedUp = signedUp;
    }

    public String getLastActivity() {
        return lastActivity;
    }

    public void setLastActivity(String lastActivity) {
        this.lastActivity = lastActivity;
    }

    public String getProfileViewed() {
        return profileViewed;
    }

    public void setProfileViewed(String profileViewed) {
        this.profileViewed = profileViewed;
    }

    public String getRank() {
        return Rank;
    }

    public void setRank(String Rank) {
        this.Rank = Rank;
    }

    public String getComments() {
        return comments;
    }

    public void setComments(String comments) {
        this.comments = comments;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<XhamsterVideo> getXhamsterVideoList() {
        if (xhamsterVideoList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            XhamsterVideoDao targetDao = daoSession.getXhamsterVideoDao();
            List<XhamsterVideo> xhamsterVideoListNew = targetDao._queryXhamsterUser_XhamsterVideoList(id);
            synchronized (this) {
                if(xhamsterVideoList == null) {
                    xhamsterVideoList = xhamsterVideoListNew;
                }
            }
        }
        return xhamsterVideoList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetXhamsterVideoList() {
        xhamsterVideoList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<XhamsterPicture> getXhamsterPictureList() {
        if (xhamsterPictureList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            XhamsterPictureDao targetDao = daoSession.getXhamsterPictureDao();
            List<XhamsterPicture> xhamsterPictureListNew = targetDao._queryXhamsterUser_XhamsterPictureList(id);
            synchronized (this) {
                if(xhamsterPictureList == null) {
                    xhamsterPictureList = xhamsterPictureListNew;
                }
            }
        }
        return xhamsterPictureList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetXhamsterPictureList() {
        xhamsterPictureList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<XhamsterGallery> getXhamsterGalleryList() {
        if (xhamsterGalleryList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            XhamsterGalleryDao targetDao = daoSession.getXhamsterGalleryDao();
            List<XhamsterGallery> xhamsterGalleryListNew = targetDao._queryXhamsterUser_XhamsterGalleryList(id);
            synchronized (this) {
                if(xhamsterGalleryList == null) {
                    xhamsterGalleryList = xhamsterGalleryListNew;
                }
            }
        }
        return xhamsterGalleryList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetXhamsterGalleryList() {
        xhamsterGalleryList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
