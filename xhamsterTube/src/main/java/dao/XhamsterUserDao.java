package dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table XHAMSTER_USER.
*/
public class XhamsterUserDao extends AbstractDao<XhamsterUser, Long> {

    public static final String TABLENAME = "XHAMSTER_USER";

    /**
     * Properties of entity XhamsterUser.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserName = new Property(1, String.class, "userName", false, "USER_NAME");
        public final static Property UserUrl = new Property(2, String.class, "userUrl", false, "USER_URL");
        public final static Property ThumbUrl = new Property(3, String.class, "thumbUrl", false, "THUMB_URL");
        public final static Property VideosCount = new Property(4, String.class, "videosCount", false, "VIDEOS_COUNT");
        public final static Property PicturesCount = new Property(5, String.class, "picturesCount", false, "PICTURES_COUNT");
        public final static Property Description = new Property(6, String.class, "description", false, "DESCRIPTION");
        public final static Property Age = new Property(7, String.class, "age", false, "AGE");
        public final static Property Gender = new Property(8, String.class, "gender", false, "GENDER");
        public final static Property SignedUp = new Property(9, String.class, "signedUp", false, "SIGNED_UP");
        public final static Property LastActivity = new Property(10, String.class, "lastActivity", false, "LAST_ACTIVITY");
        public final static Property ProfileViewed = new Property(11, String.class, "profileViewed", false, "PROFILE_VIEWED");
        public final static Property Rank = new Property(12, String.class, "Rank", false, "RANK");
        public final static Property Comments = new Property(13, String.class, "comments", false, "COMMENTS");
    };

    private DaoSession daoSession;


    public XhamsterUserDao(DaoConfig config) {
        super(config);
    }
    
    public XhamsterUserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'XHAMSTER_USER' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'USER_NAME' TEXT," + // 1: userName
                "'USER_URL' TEXT," + // 2: userUrl
                "'THUMB_URL' TEXT," + // 3: thumbUrl
                "'VIDEOS_COUNT' TEXT," + // 4: videosCount
                "'PICTURES_COUNT' TEXT," + // 5: picturesCount
                "'DESCRIPTION' TEXT," + // 6: description
                "'AGE' TEXT," + // 7: age
                "'GENDER' TEXT," + // 8: gender
                "'SIGNED_UP' TEXT," + // 9: signedUp
                "'LAST_ACTIVITY' TEXT," + // 10: lastActivity
                "'PROFILE_VIEWED' TEXT," + // 11: profileViewed
                "'RANK' TEXT," + // 12: Rank
                "'COMMENTS' TEXT);"); // 13: comments
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'XHAMSTER_USER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, XhamsterUser entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(2, userName);
        }
 
        String userUrl = entity.getUserUrl();
        if (userUrl != null) {
            stmt.bindString(3, userUrl);
        }
 
        String thumbUrl = entity.getThumbUrl();
        if (thumbUrl != null) {
            stmt.bindString(4, thumbUrl);
        }
 
        String videosCount = entity.getVideosCount();
        if (videosCount != null) {
            stmt.bindString(5, videosCount);
        }
 
        String picturesCount = entity.getPicturesCount();
        if (picturesCount != null) {
            stmt.bindString(6, picturesCount);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(7, description);
        }
 
        String age = entity.getAge();
        if (age != null) {
            stmt.bindString(8, age);
        }
 
        String gender = entity.getGender();
        if (gender != null) {
            stmt.bindString(9, gender);
        }
 
        String signedUp = entity.getSignedUp();
        if (signedUp != null) {
            stmt.bindString(10, signedUp);
        }
 
        String lastActivity = entity.getLastActivity();
        if (lastActivity != null) {
            stmt.bindString(11, lastActivity);
        }
 
        String profileViewed = entity.getProfileViewed();
        if (profileViewed != null) {
            stmt.bindString(12, profileViewed);
        }
 
        String Rank = entity.getRank();
        if (Rank != null) {
            stmt.bindString(13, Rank);
        }
 
        String comments = entity.getComments();
        if (comments != null) {
            stmt.bindString(14, comments);
        }
    }

    @Override
    protected void attachEntity(XhamsterUser entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public XhamsterUser readEntity(Cursor cursor, int offset) {
        XhamsterUser entity = new XhamsterUser( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userUrl
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // thumbUrl
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // videosCount
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // picturesCount
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // description
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // age
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // gender
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // signedUp
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // lastActivity
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // profileViewed
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // Rank
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // comments
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, XhamsterUser entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserUrl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setThumbUrl(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setVideosCount(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPicturesCount(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDescription(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAge(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setGender(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSignedUp(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setLastActivity(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setProfileViewed(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setRank(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setComments(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(XhamsterUser entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(XhamsterUser entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
